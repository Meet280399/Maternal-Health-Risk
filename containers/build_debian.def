BootStrap: docker
From: debian:stable
# MirrorURL: http://mirror.centos.org/altarch/7.9.2009/os/aarch64/
Include: apt

%setup
    echo "Not doing anything in %setup right now"

%files
    # build_files/wheels/pip /root/.cache/pip

%post
    CONTAINER_CREATION_TIME=`date`
    echo "export CONTAINER_CREATION_TIME=\"${CONTAINER_CREATION_TIME}\"" >> $APPTAINER_ENVIRONMENT
    echo "Starting apt installs:"
    apt update
    apt install -y git gcc make wget curl cmake build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev curl libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev

    echo "================================================================================="
    echo "Installing pyenv"
    echo "================================================================================="

    git clone https://github.com/pyenv/pyenv.git ~/.pyenv

    PYENV=/root/.pyenv/bin/pyenv
    echo "================================================================================="
    echo "Installing Python 3.12.5 via pyenv"
    echo "================================================================================="
    "$PYENV" install 3.12.5
    PYTHON=/root/.pyenv/versions/3.12.5/bin/python
    PYTEST=/root/.pyenv/versions/3.12.5/bin/pytest

    mkdir -p /app
    cd /app

    echo "================================================================================="
    echo "Setting up Python virtual environment"
    echo "================================================================================="
    cd /app
    "$PYTHON" -m venv .venv
    PYTHON=/app/.venv/bin/python
    "$PYTHON" -m pip install --upgrade pip setuptools wheel

    echo "================================================================================="
    echo "Installing Python libraries"
    echo "================================================================================="
    "$PYTHON" -m pip install \
        cli-test-helpers \
        joblib \
        jsonpickle \
        lightgbm \
        llvmlite \
        matplotlib \
        numba \
        numpy \
        openpyxl \
        optuna \
        pandas \
        pyarrow \
        pytest \
        pytest-xdist[psutil] \
        python-dateutil \
        scikit-image \
        scikit-learn \
        scipy \
        seaborn \
        statsmodels \
        tabulate \
        torch \
        torchaudio \
        torchvision \
        tqdm \
        typing_extensions \
        || echo "Failed to install some python libs"

    echo "================================================================================="
    echo "Installing some libs separately because pip is trashy"
    echo "================================================================================="

    "$PYTHON" -m pip install skorch || echo "Failed to install skorch"
    # "$PYTHON" -m pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu || echo "Failed to install torch libs"

    "$PYTHON" -m pip install \
        'transformers[torch]' \
        accelerate \
        'datasets[vision]' \
        protobuf \
        sentencepiece \
        || echo "Failed to install HuggingFace dependencies"

%environment
    export VENV=/app/.venv
    export ACTIVATE=$VENV/bin/activate
    export PYTHON=/app/.venv/bin/python
    export PYTEST=/app/.venv/bin/pytest

%runscript
    # Note for local development we can manually change this after building
    # https://stackoverflow.com/questions/67851786/edit-runscript-of-singularity-sif-container-after-building
    echo "Running container originally created at $CONTAINER_CREATION_TIME"
    echo "Current time: $(date)"
    echo "Arguments received: first:$1 second:$2   all:$*"
    echo -n "Using "
    "$PYTHON" --version
    /bin/bash $*


###############################################################################
#                          App: Python CUDA testing                           #
###############################################################################

%apprun cuda-test
    echo -n "Using "
    "$PYTHON" --version
    "$PYTHON" -c "import torch; print('Successfully imported torch and detected CUDA:', torch.cuda.is_available());"

%apphelp cuda-test
    Quickly check that we can import torch, and that CUDA is available.

    USAGE:
        apptainer run --app cuda-test debian_app.sif


###############################################################################
#                              App: Shell Script                              #
###############################################################################

%apprun bash
    source "$ACTIVATE"
    echo -n "Using "
    python --version
    echo -n "Using "
    pytest --version
    /bin/bash $*

%apphelp bash
    Run shell script (/bin/bash $*) with container Python virtual env activated

    USAGE:
        apptainer run --app bash debian_app.sif [full path to shell script]


###############################################################################
#                                PyTest Stuff                                 #
###############################################################################

%apprun pytest-rebuild
    echo -n "Using "
    "$PYTHON" --version
    echo -n "Using "
    "$PYTEST" --version
    bash test/rebuild_test_cache.sh

%apphelp pytest-rebuild
    Rebuild test cache. Should be run prior to running the testing app

    USAGE:
        apptainer run --app pytest-rebuild debian_app.sif


###############################################################################
#            App: Pass arbitrary args to 3.12.5 python installation           #
###############################################################################

%apprun python
    echo -n "Using "
    "$PYTHON" --version
    "$PYTHON" $*

%apphelp python
    Run python using the 3.12.5 python virtual env setup with arbitrary args.

    USAGE:
        apptainer run --app python debian_app.sif PYTHON_PROGRAM_ARGS
